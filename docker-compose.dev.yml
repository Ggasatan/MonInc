# docker-compose.yml

# Docker Compose 파일 버전 정의 (최신 버전 권장)
version: '3.8'

# 서비스(컨테이너) 목록 정의
services:
  # 1. 개발 환경을 위한 서비스 (이름: dev)
  dev:
    # 사용할 컨테이너 이미지 이름 (없으면 빌드)
    image: notification-server-dev
    # 컨테이너 빌드 설정
    build:
      # 빌드 컨텍스트 (Dockerfile이 있는 위치)
      context: .
      # 사용할 Dockerfile 지정
      dockerfile: Dockerfile
    # 포트 매핑 (호스트:컨테이너)
    # 로컬 PC의 3001번 포트를 컨테이너의 3001번 포트와 연결
    ports:
      - "3001:3001"
    # 볼륨 마운트 (소스 코드 실시간 동기화)
    # 현재 디렉토리(.)를 컨테이너의 /usr/src/app에 연결
    # node_modules는 익명 볼륨을 사용해 로컬과 동기화되지 않도록 제외 (성능 향상)
    volumes:
      - .:/usr/src/app
      - /usr/src/app/node_modules
    # 컨테이너에 항상 접속 상태 유지 (개발 중 컨테이너가 꺼지지 않도록)
    tty: true
    # 환경 변수 설정 (필요한 경우)
    # 예: 데이터베이스 연결 정보 등
    # environment:
    #   - DATABASE_URL=mongodb://mongo:27017/mydatabase

  # 2. 프로덕션 환경을 위한 서비스 (이름: prod)
  # 이 서비스는 주로 빌드만 하고 직접 실행하는 경우는 적음
  prod:
    image: notification-server-prod
    build:
      context: .
      # 프로덕션용 Dockerfile 지정
      dockerfile: Dockerfile
    ports:
      # 배포 시에는 보통 80 또는 443 포트를 사용하지만, 테스트용으로 8080에 연결
      - "3002:3002" # 프로덕션 이미지의 CMD는 dist/main.js를 실행하므로, NestJS의 기본 포트 3000과 연결

# (옵션) 데이터베이스 등 다른 서비스가 필요할 경우 여기에 추가
# 예시: MongoDB 서비스
# mongo:
#   image: mongo:latest
#   ports:
#     - "27017:27017"
#   volumes:
#     - mongo-data:/data/db

# (옵션) 볼륨 정의
# volumes:
#   mongo-data: